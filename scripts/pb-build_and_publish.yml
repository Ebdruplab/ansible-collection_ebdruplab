# Description:
#   This playbook builds an Ansible Galaxy collection from the specified source directory
#   and publishes it to Ansible Galaxy using the provided API token.
#
# Environment Setup:
#   # Install the necessary linting tools:
#   pip install --user yamllint ansible-lint
#
# Usage:
#   1. Export your collection path and token:
#        export COLLECTION_PATH="./my_namespace-my_collection"
#        export GALAXY_TOKEN="YOUR_API_TOKEN"
#
#   2. Run the playbook (lint, build & publish):
#        ansible-playbook publish_collection.yml
#
#   3. To lint only:
#        ansible-playbook publish_collection.yml --tags lint
#
#   4. To build only:
#        ansible-playbook publish_collection.yml --tags build
#
#   5. To publish only:
#        ansible-playbook publish_collection.yml --tags publish

---
- name: 'Build, publish & lint Ansible Galaxy collection'
  hosts: localhost
  connection: local
  gather_facts: false
  tags:
    - lint
    - build
    - publish

  vars:
    run_lint: false
    # Path to your collection root (must contain galaxy.yml)
    collection_src_path: "{{ lookup('env','COLLECTION_PATH') | default('../ebdruplab/semaphoreui', true) }}"
    # Your Galaxy API token (set via env var or --extra-vars)
    galaxy_token: "{{ lookup('env','GALAXY_TOKEN') }}"

  tasks:
    # -------------------------
    # LINTING
    # -------------------------
    - name: 'Lint all YAML files with yamllint'
      tags:
        - lint
      ansible.builtin.command:
        cmd: yamllint -c .yamllint.yml "{{ collection_src_path }}"
      args:
        chdir: "{{ collection_src_path }}"
      register: yamllint
      failed_when: yamllint.rc != 0
      when: run_lint

    - name: 'Lint Ansible code with ansible-lint'
      tags:
        - lint
      ansible.builtin.command:
        cmd: ansible-lint "{{ collection_src_path }}"
      register: ansible_lint
      failed_when: ansible_lint.rc != 0
      when: run_lint

    # -------------------------
    # BUILD
    # -------------------------
    - name: 'Verify collection source path exists'
      tags:
        - build
      ansible.builtin.stat:
        path: "{{ collection_src_path }}"
      register: src_stat

    - name: 'Abort if collection_src_path does not exist'
      tags:
        - build
      ansible.builtin.fail:
        msg: "Collection source path {{ collection_src_path }} not found."
      when: not src_stat.stat.exists

    - name: 'Build the collection artifact'
      tags:
        - build
      ansible.builtin.command:
        cmd: >
          ansible-galaxy collection build {{ collection_src_path }} --force
      args:
        chdir: "{{ collection_src_path }}"
      register: build_result

    - name: 'Extract path to generated archive'
      tags:
        - build
      ansible.builtin.set_fact:
        collection_archive: >-
          {{
            (build_result.stdout
             | regex_search('Created collection artifact at (.+)$', '\\1'))
          }}

    - name: 'Fail if we could not parse the built archive path'
      tags:
        - build
      ansible.builtin.fail:
        msg: "Could not find built collection artifact in build output."
      when: collection_archive is not defined

    # -------------------------
    # PUBLISH
    # -------------------------
    - name: 'Publish the collection to Galaxy'
      tags:
        - publish
      ansible.builtin.command:
        cmd: >
          ansible-galaxy collection publish {{ collection_archive }}
          --api-key {{ galaxy_token }}
      environment:
        ANSIBLE_GALAXY_TOKEN: "{{ galaxy_token }}"
      when: galaxy_token is defined

    - name: 'Warn if no Galaxy token provided'
      tags:
        - publish
      ansible.builtin.debug:
        msg: |
          No Galaxy token was found in env var GALAXY_TOKEN.
          Skipping publish step.
      when: galaxy_token is not defined

