---
- name: "Test Full Schedule Lifecycle - Create, Get, Update, Get-Updated, Delete, Verify-Delete"
  hosts: localhost
  gather_facts: false
  vars:
    semaphore_host: "http://localhost"
    semaphore_port: 3000
    semaphore_username: "{{ lookup('env', 'ebdruplab_integration_test_USER') | default('admin', true) }}"
    semaphore_password: "{{ lookup('env', 'ebdruplab_integration_test_PW') | default('changeme', true) }}"
    project_name: "Ebdruplab test scheduled full"
    key_path: "/tmp/integration_test_key"

  tasks:
    - name: "Log In To Semaphore"
      ebdruplab.semaphoreui.login:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        username: "{{ semaphore_username }}"
        password: "{{ semaphore_password }}"
      register: login_result

    - name: "Create A Test Project"
      ebdruplab.semaphoreui.project_create:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        name: "{{ project_name }}"
        alert: false
        alert_chat: "Ansible"
        max_parallel_tasks: 0
        demo: false
      register: create_project

    - name: "Get List Of Projects"
      ebdruplab.semaphoreui.project_list:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
      register: projects

    - name: "Ensure At Least One Project Exists"
      ansible.builtin.assert:
        that:
          - projects.projects | length > 0

    - name: "Generate A Temporary SSH Keypair"
      community.crypto.openssh_keypair:
        path: "{{ key_path }}"
        type: rsa
        size: 2048
        force: true
      register: keypair

    - name: "Upload SSH Key To Semaphore (Project Scope)"
      ebdruplab.semaphoreui.project_key_create:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        name: "Integration Test Key"
        type: "ssh"
        ssh:
          login: "git"
          private_key: "{{ lookup('file', key_path) }}"
      register: created_key

    - name: "Remember The Semaphore Key ID"
      ansible.builtin.set_fact:
        semaphore_key_id: "{{ created_key.key.id }}"

    - name: "List Inventories For The Project"
      ebdruplab.semaphoreui.project_inventory_list:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
      register: inventories

    - name: "Create A Dummy Inventory If None Exists"
      when: inventories.inventories | length == 0
      ebdruplab.semaphoreui.project_inventory_create:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        inventory:
          name: "Integration Test Inventory"
          type: "static"
          inventory: |
            localhost ansible_connection=local
          ssh_key_id: "{{ created_key.key.id }}"
      register: created_inventory

    - name: "Set inventory_id For Later"
      ansible.builtin.set_fact:
        inventory_id: >-
          {{ (inventories.inventories | length > 0)
             | ternary(inventories.inventories[0].id, created_inventory.inventory.id) }}

    - name: "List Repositories For The Project"
      ebdruplab.semaphoreui.project_repository_list:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
      register: repos

    - name: "Create A Dummy Repository If None Exists"
      ebdruplab.semaphoreui.project_repository_create:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        repository:
          name: "Integration Test Repository"
          git_url: "https://github.com/ebdruplab/semaphoreui.git"
          git_branch: "main"
          ssh_key_id: "{{ semaphore_key_id }}"
      register: created_repo

    - name: "Set repository_id For Later"
      ansible.builtin.set_fact:
        repository_id: >-
          {{ (repos.repositories | length > 0)
             | ternary(repos.repositories[0].id, created_repo.repository.id) }}

    - name: "Create A Dummy Template For Schedule"
      ebdruplab.semaphoreui.project_template_create:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        template:
          name: "Template for Schedule Lifecycle Test"
          app: "ansible"
          playbook: "playbook.yml"
          inventory_id: "{{ inventory_id }}"
          repository_id: "{{ repository_id }}"
          environment_id: null
          type: "job"
          allow_override_args_in_task: false
          survey_vars: []
      register: created_template

    # ---- CREATE ----
    - name: "Create A Schedule"
      ebdruplab.semaphoreui.project_schedule_create:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        schedule:
          name: "Test Schedule"
          cron_format: "* * * * *"
          template_id: "{{ created_template.template.id }}"
          active: true
      register: created_schedule

    - name: "Assert Creation Response"
      ansible.builtin.assert:
        that:
          - created_schedule.schedule.name == "Test Schedule"
          - created_schedule.schedule.active

    # ---- LIST (immediately after creation) ----
    - name: "List Schedules After Creation"
      ebdruplab.semaphoreui.project_schedule_list:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
      register: schedules_after_create

    - name: "Assert Created Schedule Is Listed"
      ansible.builtin.assert:
        that:
          - "'Test Schedule' in (schedules_after_create.schedules | map(attribute='name') | list)"

    - name: "Debug All Schedule Names After Creation"
      ansible.builtin.debug:
        msg: "{{ schedules_after_create.schedules | map(attribute='name') | list }}"

    # ---- GET ----
    - name: "Fetch Created Schedule"
      ebdruplab.semaphoreui.project_schedule_get:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        schedule_id: "{{ created_schedule.schedule.id }}"
      register: fetched_schedule

    - name: "Assert Fetched Schedule Matches Expected"
      ansible.builtin.assert:
        that:
          - fetched_schedule.schedule.name == "Test Schedule"
          - fetched_schedule.schedule.cron_format == "* * * * *"
          - fetched_schedule.schedule.active

    # ---- UPDATE ----
    - name: "Update The Schedule"
      ebdruplab.semaphoreui.project_schedule_update:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        schedule_id: "{{ created_schedule.schedule.id }}"
        schedule:
          name: "Updated Schedule"
          cron_format: "0 */2 * * *"
          template_id: "{{ created_template.template.id }}"
          active: false
      register: update_result

    - name: "Assert Update Response"
      ansible.builtin.assert:
        that:
          - update_result.status in [200, 201, 204]

    # ---- LIST (after update with sorting) ----
    - name: "List Schedules Sorted By Name"
      ebdruplab.semaphoreui.project_schedule_list:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        sort: name
        order: asc
      register: schedules_sorted

    - name: "Assert Updated Schedule Still Listed"
      ansible.builtin.assert:
        that:
          - "'Updated Schedule' in (schedules_sorted.schedules | map(attribute='name') | list)"

    - name: "Debug All Schedule Names After Update"
      ansible.builtin.debug:
        msg: "{{ schedules_sorted.schedules | map(attribute='name') | list }}"

    - name: "Fetch Updated Schedule"
      ebdruplab.semaphoreui.project_schedule_get:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        schedule_id: "{{ created_schedule.schedule.id }}"
      register: fetched_updated_schedule

    - name: "Assert Fetched-Updated Schedule Matches Expected"
      ansible.builtin.assert:
        that:
          - fetched_updated_schedule.schedule.name == "Updated Schedule"
          - fetched_updated_schedule.schedule.cron_format == "0 */2 * * *"
          - not fetched_updated_schedule.schedule.active

    # ---- DELETE ----
    - name: "Delete The Schedule"
      ebdruplab.semaphoreui.project_schedule_delete:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        schedule_id: "{{ created_schedule.schedule.id }}"

    - name: "Verify Schedule Deletion (Fetch Should Fail Or Be Empty)"
      ebdruplab.semaphoreui.project_schedule_get:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        schedule_id: "{{ created_schedule.schedule.id }}"
      register: fetch_after_delete
      failed_when: false

    - name: "List Schedules After Deletion"
      ebdruplab.semaphoreui.project_schedule_list:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
      register: schedules_after_delete

    - name: "Assert Deleted Schedule Is Not Listed"
      ansible.builtin.assert:
        that:
          - "'Updated Schedule' not in (schedules_after_delete.schedules | map(attribute='name') | list)"

    - name: "Debug All Schedule Names After Deletion"
      ansible.builtin.debug:
        msg: "{{ schedules_after_delete.schedules | map(attribute='name') | list }}"

    # ---- TEARDOWN ----
    - name: "Delete The Template"
      ebdruplab.semaphoreui.project_template_delete:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        template_id: "{{ created_template.template.id }}"

    - name: "Delete The Dummy Repository If We Created One"
      ebdruplab.semaphoreui.project_repository_delete:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        repository_id: "{{ repository_id }}"

    - name: "Wait Briefly For Semaphore To Release Key Usage"
      ansible.builtin.pause:
        seconds: 1

    - name: "Delete The SSH Key In Semaphore"
      ebdruplab.semaphoreui.project_key_delete:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"
        key_id: "{{ semaphore_key_id }}"

    - name: "Remove Local SSH Key Files"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ key_path }}"
        - "{{ key_path }}.pub"

    - name: "Delete Project"
      ebdruplab.semaphoreui.project_delete:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
        project_id: "{{ create_project.project.id }}"

    - name: "Log Out"
      ebdruplab.semaphoreui.logout:
        host: "{{ semaphore_host }}"
        port: "{{ semaphore_port }}"
        session_cookie: "{{ login_result.session_cookie }}"
